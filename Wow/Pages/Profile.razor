@page "/profile"
@using Wow.Controllers
@using Wow.Models;
@inject IJSRuntime JSRuntime

<PageTitle>Профиль @AccountController.user.Login | WoWch</PageTitle>

<head>
    
</head>
<body class="body-profile">
    <div class="profile-information-bar">
        <div>
            <img src="@picture" style="height: 300px; width:300px;" />
        </div>
        <p>Изменить аватар</p>
        <form>
            <InputFile OnChange="@OnFileSelection" accept=".jpg, .png" />
            
        </form>
        
        <h3>
            Профиль @AccountController.user.Login
        </h3>
    </div>
    <div class="profile-body">
        <p style="font-size: 14pt">
            Дата регистрации: @AccountController.user.RegistrationDate
        </p>
    </div>

    <div class="user-articles">
        @foreach (var item in themes)
        {
            @if (item.Creator.Equals(AccountController.user.Login))
            {
                <div class="article">
                    <div class="article-header">
                        <a>@item.Creator</a>
                        <p class="article-header-text">@item.Header</p>
                        <span class="comment-timestamp">@item.ReleaseDate.ToString("dd.MM.yyyy HH:mm")</span>
                        @if (AccountController.user != null && item.Creator.Equals(AccountController.user.Login))
                        {
                            <input type="button" value="Редактировать" @onclick="() => HandleButtonEditClick(item)" />
                        }
                    </div>
                    <div class="article-text">
                        @item.Text
                    </div>
                    <div class="article-footer">
                        <div class="article-rating">
                            <input type="button" @onclick="() => HandleButtonLikeClick(item)" value="Понравилось" />
                            <p>@item.Likes</p>
                        </div>
                        <div class="article-rating">
                            <input type="button" @onclick="() => HandleButtonDislikeClick(item)" value="Не понравилось" />
                            <p>@item.Dislikes</p>
                        </div>
                    </div>
                    <div class="article-comments">
                        <div class="comment">

                            @if (item.Comments != null)
                            {
                                @foreach (Comment comment in item.Comments)
                                {
                                    <div class="comment-header">
                                        <span class="comment-author">@comment.Author</span>
                                        <span class="comment-timestamp">@comment.Timestamp.ToString("dd.MM.yyyy HH:mm")</span>
                                    </div>
                                    <div class="comment-body">
                                        <p>@comment.Text</p>
                                    </div>
                                }
                            }
                            <div class="input-comment-container">
                            <form>
                                <input class="comment-input" type="text" @bind="commentText" placeholder="Введите текст..." />
                                <input class="comment-submit" type="button" @onclick="() => HandleButtonCommentClick(item)" value="Отправить" />
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            }
        }
    </div>

</body>


@code {
    private IBrowserFile file;
    private Avatar photo = new Avatar();
    string picture = SetPicture();

    private static string SetPicture()
    {
        string pic = string.Empty;
        if (Avatar.IfImageExists())
        {
            pic = $"data: .jpg;base64,{Convert.ToBase64String(AccountController.GetAvatarFromDb())}";
        }
        else
        {
            pic = string.Empty;
        }
        return pic;
    }
    

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        var imgFile = await file.RequestImageFileAsync(file.ContentType, 226, 223);

        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        picture = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

        photo.Id = AccountController.user.Id;
        photo.FileName = imgFile.Name;
        photo.ImageData = await ReadFileData(imgFile);
        photo.SavePhoto();
        await JSRuntime.InvokeVoidAsync("alert", "Аватар изменён.");
        StateHasChanged();
    }

    private async Task<byte[]> ReadFileData(IBrowserFile file)
    {
        using (var stream = file.OpenReadStream())
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            return memoryStream.ToArray();
        }
    }

    private string commentText = string.Empty;
    List<Theme> themes = ThemeController.GetThemes();

    private void HandleButtonLikeClick(Theme theme)
    {
        if (AccountController.user != null)
            theme.AddLike();
    }

    private void HandleButtonDislikeClick(Theme theme)
    {
        if (AccountController.user != null)
            theme.AddDislike();
    }

    private void HandleButtonEditClick(Theme theme)
    {

    }

    private void HandleButtonCommentClick(Theme theme)
    {
        Comment comment = new Comment(AccountController.user.Login, commentText);
        theme.AddCommentToDb(theme, comment);
        commentText = string.Empty;
    }
}
    