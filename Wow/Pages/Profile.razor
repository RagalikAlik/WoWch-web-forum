@page "/profile"
@using Wow.Controllers
@using Wow.Models;

<PageTitle>Профиль @AccountController.user.Login | WoWch</PageTitle>

<head>
    
</head>
<body class="body-profile">
    <div class="profile-information-bar">
        <div>
            <img src="@picture" style="height: 300px; width:300px;" />
        </div>
        <p>Изменить аватар</p>
        <form>
            <InputFile OnChange="@OnFileSelection" accept=".jpg, .png" />
            
        </form>
        
        <h3>
            Профиль @AccountController.user.Login
        </h3>
    </div>
    <div class="profile-body">
        <p style="font-size: 14pt">
            Дата регистрации: @AccountController.user.RegistrationDate
        </p>
    </div>
</body>


@code {
    private IBrowserFile file;
    private Avatar photo = new Avatar();
    string picture = SetPicture();

    private static string SetPicture()
    {
        string pic = string.Empty;
        if (Avatar.IfImageExists())
        {
            pic = $"data: .jpg;base64,{Convert.ToBase64String(AccountController.GetAvatarFromDb())}";
        }
        else
        {
            pic = string.Empty;
        }
        return pic;
    }
    

    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        var imgFile = await file.RequestImageFileAsync(file.ContentType, 226, 223);

        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        picture = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

        photo.Id = AccountController.user.Id;
        photo.FileName = imgFile.Name;
        photo.ImageData = await ReadFileData(imgFile);
        photo.SavePhoto();
        StateHasChanged();
    }

    private async Task<byte[]> ReadFileData(IBrowserFile file)
    {
        using (var stream = file.OpenReadStream())
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            return memoryStream.ToArray();
        }
    }
}
    