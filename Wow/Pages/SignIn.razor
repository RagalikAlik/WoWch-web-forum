@page "/signin"
@using Wow.Controllers
@using Wow.Models

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<head>
    <link rel="stylesheet" href="css/Registration.css">
</head>
<body class="signit-body">
    <div class="login-container">
        <h2 class="login-title">Авторизация</h2>
        <form method="post">
            <div class="input-container">
                <input class="input-field" type="text" @bind="login" placeholder="Логин" required>
            </div>
            <div class="input-container">
                <input class="input-field" type="password" @bind="password" placeholder="Пароль" required>
            </div>
            <div class="input-button-container">
                <input class="login-button" type="submit" @onclick="Authorization" value="Войти" />
            </div>
        </form>
    </div>
</body>

@code{
    private string? login;
    private string? password;
    static IConfigurationBuilder builder = new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile("appSettings.json", optional: true, reloadOnChange: true);
    static readonly IConfiguration Configuration = builder.Build();

    private static readonly string? Link =Configuration.GetConnectionString("DefaultConnection");



    async Task Authorization()
    {
        if (login != null && password != null)
        {
            try
            {
                User checkUser = await AccountController.Authorization(login, password);
                if(checkUser.Status == "banned")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Этот аккаунт заблокирован.");
                    Navigation.NavigateTo("/signin", true);
                }
                else
                {
                    if (checkUser != null && checkUser.Password.Equals(password))
                    {
                        Navigation.NavigateTo("/", true);
                        await JSRuntime.InvokeVoidAsync("alert", "Вы вошли в аккаунт.");
                        AccountController.user = checkUser;
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Неверный пароль.");
                        Navigation.NavigateTo("/signin", true);
                    }
                }
            }
            catch (Exception e)
            {
                await JSRuntime.InvokeVoidAsync("alert", e.Message.ToString());
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Введите данные.");
        }
    }
}
