@page "/"
@using Wow.Controllers
@using Wow.Models
@using Microsoft.AspNetCore.Components
@using Npgsql;
@using Blazored.TextEditor;
@using System.Linq;

<PageTitle>WoWch</PageTitle>
<head>
    <link rel="stylesheet" href="~/css/site.css" />
</head>
<body style="width: 100%; height: 100%">
    <div style="display: flex; flex-direction:row;">
        <div style="width:85%; height:100%;">
            <h2 style="margin-left: 10%">Форум</h2>
            <div class="category-buttons">
                <input type="button" class="category-button" @onclick='() => {cathegory = "Без категории";SortCathegories();} ' value="Без категории" />
                <input type="button" class="category-button" @onclick='() => {cathegory = "Новости";SortCathegories();} ' value="Новости" />
                <input type="button" class="category-button" @onclick='() => {cathegory = "Игровые вопросы";SortCathegories();}' value="Игровые вопросы" />
                <input type="button" class="category-button" @onclick='() => {cathegory = "Аддоны"; SortCathegories();}' value="Аддоны" />
                <input type="button" class="category-button" @onclick='() => {cathegory = "Гайды"; SortCathegories(); }' value="Гайды" />
            </div>
            @foreach (var item in qwe)
            {
                item.theme.AddView();
                <div class="article">
                    <div class="article-header">
                        <p class="article-creator">@item.theme.Creator</p>
                        <p class="article-header-text">@item.theme.Header</p>
                        <div class="article-stats">
                            <p class="article-views">Просмотры: @item.theme.Views</p>
                            <span class="comment-timestamp">@item.theme.ReleaseDate.ToString("dd.MM.yyyy HH:mm")</span>
                        </div>
                        @if (AccountController.user != null)
                        {
                            @if (AccountController.user.Login.Equals(item.theme.Creator) || AccountController.user.Role.Equals("admin"))
                            {
                                <input class="delete-button" type="button" value="Удалить" @onclick="() => HandleButtonDeleteArticleClick(item.theme)" />
                            }
                        }
                        @if (AccountController.user != null && item.theme.Creator.Equals(AccountController.user.Login))
                        {
                            <input class="edit-button" type="button" value="Редактировать" @onclick="() => {item.editing = !item.editing;}" />
                        }
                    </div>
                    <div class="article-text">
                        @item.theme.Text
                    </div>
                    <div class="article-footer">
                        <div class="article-rating">
                            <input class="comment-submit" type="button" @onclick="() => HandleButtonLikeClick(item.theme)" value="Понравилось" />
                            <p class="comment-rating-number">@item.theme.Likes</p>
                        </div>
                        <div class="article-rating">
                            <input class="comment-submit" type="button" @onclick="() => HandleButtonDislikeClick(item.theme)" value="Не понравилось" />
                            <p class="comment-rating-number">@item.theme.Dislikes</p>
                        </div>
                    </div>
                    @code {
                    BlazoredTextEditor? QuillHtml;
                }

                @if (item.editing && item.theme.Creator == AccountController.user.Login)
                    {


                        <div class="card-body mb-5" style="height:500px;">
                            <BlazoredTextEditor @ref=QuillHtml Placeholder="Текст статьи...">
                                <ToolbarContent>
                                    <select class="ql-header">
                                        <option selected=""></option>
                                        <option value="1"></option>
                                        <option value="2"></option>
                                        <option value="3"></option>
                                        <option value="4"></option>
                                        <option value="5"></option>
                                    </select>
                                    <span class="ql-formats">
                                        <button class="ql-bold"></button>
                                        <button class="ql-italic"></button>
                                        <button class="ql-underline"></button>
                                        <button class="ql-strike"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <select class="ql-color"></select>
                                        <select class="ql-background"></select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-list" value="ordered"></button>
                                        <button class="ql-list" value="bullet"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-link"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-video"></button>
                                    </span>

                                </ToolbarContent>
                            </BlazoredTextEditor>

                        </div>
                        <div class="card-footer">
                            <button class="btn btn-success" @onclick=@(async ()=> await SaveChanges(item.theme, QuillHtml) )>Готово</button>
                        </div>
                    }
                    <div class="article-comments">
                        <div class="comment">

                            @if (item.theme.Comments != null)
                            {
                                @foreach (Comment comment in item.theme.Comments)
                                {
                                    <div class="comment-header">
                                        <span class="comment-author">@comment.Author</span>
                                        @if (AccountController.user != null)
                                        {
                                            @if (AccountController.user.Login.Equals(comment.Author) || AccountController.user.Role.Equals("admin"))
                                            {
                                                <input class="delete-comment-button" type="button" value="Удалить" @onclick="() => HandleButtonDeleteCommentClick(item.theme, comment)" />
                                            }
                                        }
                                        <span class="comment-timestamp">@comment.Timestamp.ToString("dd.MM.yyyy HH:mm")</span>
                                    </div>
                                    <div class="comment-body">
                                        <p>@comment.Text</p>
                                    </div>
                                }
                            }
                            <div class="input-comment-container">
                                <form>
                                    <input class="comment-input" type="text" @bind="commentText" placeholder="Введите текст..." />
                                    <input class="comment-submit" type="button" @onclick="() => HandleButtonCommentClick(item.theme)" value="Отправить" />
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div style="width:15%; height:100%;">
            <div class="stats-container">
                <p class="stats-title">Статистика сайта</p>
                <div class="stats-item">
                    <span class="stats-key">кол-во пользователей:</span>
                    <span class="stats-value">@String.Join(" ",MainController.GetAmountOfUsers())</span>
                </div>
                <div class="stats-item">
                    <span class="stats-key">кол-во статей:</span>
                    <span class="stats-value">@String.Join(" ",MainController.GetAmountOfArticles())</span>
                </div>
            </div>
            <div class="image-lich">
                <img src="https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/cb568c5e-5230-41d5-b32f-fe0215c1fceb/d18uv0o-fbb296e6-1309-4854-8885-3141447601fe.gif?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcL2NiNTY4YzVlLTUyMzAtNDFkNS1iMzJmLWZlMDIxNWMxZmNlYlwvZDE4dXYwby1mYmIyOTZlNi0xMzA5LTQ4NTQtODg4NS0zMTQxNDQ3NjAxZmUuZ2lmIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.P_0QP9M2UQahfrweGb3IyPWGhl4ncivKGMXsbV7HUW4" />
            </div>
        </div>
    </div>


</body>


@code {
    private string commentText = string.Empty;
    List<Theme> themes = ThemeController.GetThemes();

    public class Pipa{
        public Theme theme { get; set; }
        public bool editing { get; set; }
    }

    static List<Pipa> qwe = GetTopics();
    static List<Pipa> all = GetTopics();
    static string cathegory = "";
    static void SortCathegories()
    {
        all = GetTopics();
        if (cathegory != "")
            qwe = all.Where(x => x.theme.Cathegory.Equals(cathegory)).ToList();
        else
            qwe = all;
    }

    public static List<Pipa> GetTopics()
    {
       
    List<Theme> themes = ThemeController.GetThemes();
    List<Pipa> res = new List<Pipa>() { };
    foreach (var i in themes)
    {
        res.Add(new Pipa() { theme = i, editing = false });
    }
    return res;
    }

    private const string Link = "Server=localhost;Port=5432;Username=user;Password=password;Database=postgres";

    private async Task SaveChanges(Theme theme, BlazoredTextEditor? QuillHtml)
    {
    await using (NpgsqlConnection conn = new NpgsqlConnection(Link))
    {
        conn.ConnectionString = Link;
        conn.Open();
        NpgsqlCommand cmd = new NpgsqlCommand();
        cmd.CommandText = $"UPDATE themes SET text = @text WHERE id = @id";
        cmd.Parameters.AddWithValue("@text", (await QuillHtml.GetHTML()).ToString());
        cmd.Parameters.AddWithValue("@id", theme.Id);
        cmd.Connection = conn;
        cmd.ExecuteScalar();
    }
    }

    private void HandleButtonLikeClick(Theme theme)
    {
    if (AccountController.user != null)
        theme.AddLike();
    }

    private void HandleButtonDislikeClick(Theme theme)
    {
    if (AccountController.user != null)
        theme.AddDislike();
    }

    private void HandleButtonEditClick(Theme theme, bool showElement)
    {
        ToggleElement(showElement);
        showElement = !showElement;
    }

    private bool ToggleElement(bool showElement) => !showElement;


    private void HandleButtonDeleteArticleClick(Theme theme)
    {
    if (AccountController.user != null || AccountController.user.Role.Equals("admin"))
        theme.DropArticle();
    }

    private void HandleButtonCommentClick(Theme theme)
    {
    if (AccountController.user != null)
    {
        Comment comment = new Comment(AccountController.user.Login, commentText);
        theme.AddCommentToDb(theme, comment);
        commentText = string.Empty;
    }
    }

    private void HandleButtonDeleteCommentClick(Theme theme, Comment comment)
    {
    if (AccountController.user != null)
    {
        theme.RemoveComment(comment);
    }
    }
}