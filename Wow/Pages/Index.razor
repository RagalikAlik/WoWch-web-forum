@page "/"
@using Wow.Controllers
@using Wow.Models
@using Microsoft.AspNetCore.Components
@using Npgsql;
@using Blazored.TextEditor;

<PageTitle>WoWch</PageTitle>
<head>
    <link rel="stylesheet" href="~/css/site.css"/>
</head>
<body style="width: 100%; height: 100%">
    <div style="display: flex; flex-direction:row;">
        <div style="width:85%; height:100%;">
            <h2 style="margin-left: 10%">Форум</h2>
            <div>
                 @*<h3>Гайды</h3>*@
            </div>
            @foreach(var item in themes)
            {
                item.AddView();
                <div class="article">
                    <div class="article-header">
                        <p class="article-creator">@item.Creator</p>
                        <p class="article-header-text">@item.Header</p>
                        <div class="article-stats">
                            <p class="article-views">Просмотры: @item.Views</p>
                            <span class="comment-timestamp">@item.ReleaseDate.ToString("dd.MM.yyyy HH:mm")</span>
                        </div>
                        @if (AccountController.user != null)
                        {
                            @if (AccountController.user.Login.Equals(item.Creator) || AccountController.user.Role.Equals("admin"))
                            {
                                <input class="delete-button" type="button" value="Удалить" @onclick="() => HandleButtonDeleteArticleClick(item)" />
                            }
                        }
                        @if (AccountController.user!=null && item.Creator.Equals(AccountController.user.Login))
                        {
                            <input class="edit-button" type="button" value="Редактировать" @onclick="() => HandleButtonEditClick(item)" />
                        }
                    </div>
                    <div class="article-text">
                        @item.Text
                    </div>
                    <div class="article-footer">
                        <div class="article-rating">
                            <input class="comment-submit" type="button" @onclick="() => HandleButtonLikeClick(item)" value="Понравилось" />
                            <p class="comment-rating-number">@item.Likes</p>
                        </div>
                        <div class="article-rating">
                            <input class="comment-submit" type="button" @onclick="() => HandleButtonDislikeClick(item)" value="Не понравилось" />
                            <p class="comment-rating-number">@item.Dislikes</p>
                        </div>                       
                    </div>
                   @if (showElement)
                    {
                         <div class="card-body mb-5" style="height:500px;">
                <BlazoredTextEditor @ref=QuillHtml Placeholder="Текст статьи...">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats"> 
                            <select class="ql-color"></select> 
                            <select class="ql-background"></select> 
                        </span> 
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button> 
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button> 
                        </span> 
                        <span class="ql-formats">
                            <button class="ql-video"></button> 
                        </span>

                    </ToolbarContent>
                </BlazoredTextEditor>

            </div>
            <div class="card-footer">
                <button class="btn btn-success" @onclick=@(async ()=> await SaveTheme(item) )>Готово</button>
            </div>
                    }
                    <div class="article-comments">
                        <div class="comment">
                            
                            @if(item.Comments != null)
                            {
                                @foreach(Comment comment in item.Comments)
                                {
                                    <div class="comment-header">
                                        <span class="comment-author">@comment.Author</span>
                                        @if (AccountController.user != null)
                                        {
                                            @if (AccountController.user.Login.Equals(comment.Author) || AccountController.user.Role.Equals("admin"))
                                            {
                                                <input class="delete-comment-button" type="button" value="Удалить" @onclick="() => HandleButtonDeleteCommentClick(item, comment)" />
                                            }
                                        }
                                        <span class="comment-timestamp">@comment.Timestamp.ToString("dd.MM.yyyy HH:mm")</span>
                                    </div>
                                    <div class="comment-body">
                                        <p>@comment.Text</p>
                                    </div>
                                }
                            }
                            <div class="input-comment-container">
                                <form>
                                    <input class="comment-input" type="text" @bind="commentText" placeholder="Введите текст..." />
                                    <input class="comment-submit" type="button" @onclick="() => HandleButtonCommentClick(item)" value="Отправить" />
                                </form>
                            </div>                            
                        </div>
                    </div>
                </div>
            }
        </div>
        <div style="width:15%; height:100%;">
            <div class="stats-container">
                <p class="stats-title">Статистика сайта</p>
                <div class="stats-item">
                    <span class="stats-key">кол-во пользователей:</span>
                    <span class="stats-value">@String.Join(" ",MainController.GetAmountOfUsers())</span>
                </div>
                <div class="stats-item">
                    <span class="stats-key">кол-во статей:</span>
                    <span class="stats-value">@String.Join(" ",MainController.GetAmountOfArticles())</span>
                </div>
            </div>
        </div>
    </div>
    

</body>

@code{
    private BlazoredTextEditor? QuillHtml;
    private string commentText = string.Empty;
    private static bool showElement = false;
    List<Theme> themes = ThemeController.GetThemes();
    private const string Link = "Server=localhost;Port=5432;Username=user;Password=password;Database=postgres";

    private async Task SaveTheme(Theme theme)
    {
        await using (NpgsqlConnection conn = new NpgsqlConnection(Link))
        {
            conn.ConnectionString = Link;
            conn.Open();
            NpgsqlCommand cmd = new NpgsqlCommand();
            cmd.CommandText = $"UPDATE themes SET text = @text WHERE id = @id";
            cmd.Parameters.AddWithValue("@text", QuillHtml.ToString());
            cmd.Parameters.AddWithValue("@id", theme.Id);
            cmd.Connection = conn;
            cmd.ExecuteScalar();
        }
    }

    private void ToggleElement()
    {
        showElement = !showElement;
    }

    private void HandleButtonLikeClick(Theme theme)
    {
        if(AccountController.user!=null)
            theme.AddLike();
    }

    private void HandleButtonDislikeClick(Theme theme)
    {
        if (AccountController.user != null)
            theme.AddDislike();
    }

    private void HandleButtonEditClick(Theme theme)
    {
        ToggleElement();
        ThemeController.themeTextForEditor = theme.Text.ToString();
        ThemeController.themeIdForEditor = theme.Id;
    }

    private void HandleButtonDeleteArticleClick(Theme theme)
    {
        if (AccountController.user != null || AccountController.user.Role.Equals("admin"))
            theme.DropArticle();
    }

    private void HandleButtonCommentClick(Theme theme)
    {
        if (AccountController.user != null)
        {
            Comment comment = new Comment(AccountController.user.Login, commentText);
            theme.AddCommentToDb(theme ,comment);
            commentText = string.Empty;
        }
    }

    private void HandleButtonDeleteCommentClick(Theme theme, Comment comment)
    {
        if(AccountController.user != null)
        {
            theme.RemoveComment(comment);
        }
    }

}